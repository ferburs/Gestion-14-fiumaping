import {
  He,
  K,
  Li,
  Nd,
  Zw
} from "./chunk-BDBIBSIQ.js";
import {
  _n
} from "./chunk-EU42VC65.js";
import "./chunk-4OORONJH.js";
import {
  Nt
} from "./chunk-OXS4RIMJ.js";
import "./chunk-STL2KGEZ.js";
import {
  c
} from "./chunk-LZZZ25U2.js";
import {
  t,
  u,
  v,
  w,
  x
} from "./chunk-ASEP6WC2.js";

// node_modules/@mappedin/mappedin-js/lib/esm/inspector-WHX467BE.js
c();
c();
c();
c();
var S = class i {
  constructor(e, o, t2, n, s = "div") {
    this.parent = e, this.object = o, this.property = t2, this._disabled = false, this._hidden = false, this.initialValue = this.getValue(), this.domElement = document.createElement(s), this.domElement.classList.add("controller"), this.domElement.classList.add(n), this.$name = document.createElement("div"), this.$name.classList.add("name"), i.nextNameID = i.nextNameID || 0, this.$name.id = "lil-gui-name-".concat(++i.nextNameID), this.$widget = document.createElement("div"), this.$widget.classList.add("widget"), this.$disable = this.$widget, this.domElement.appendChild(this.$name), this.domElement.appendChild(this.$widget), this.domElement.addEventListener("keydown", (r) => r.stopPropagation()), this.domElement.addEventListener("keyup", (r) => r.stopPropagation()), this.parent.children.push(this), this.parent.controllers.push(this), this.parent.$children.appendChild(this.domElement), this._listenCallback = this._listenCallback.bind(this), this.name(t2);
  }
  name(e) {
    return this._name = e, this.$name.textContent = e, this;
  }
  onChange(e) {
    return this._onChange = e, this;
  }
  _callOnChange() {
    this.parent._callOnChange(this), this._onChange !== void 0 && this._onChange.call(this, this.getValue()), this._changed = true;
  }
  onFinishChange(e) {
    return this._onFinishChange = e, this;
  }
  _callOnFinishChange() {
    this._changed && (this.parent._callOnFinishChange(this), this._onFinishChange !== void 0 && this._onFinishChange.call(this, this.getValue())), this._changed = false;
  }
  reset() {
    return this.setValue(this.initialValue), this._callOnFinishChange(), this;
  }
  enable(e = true) {
    return this.disable(!e);
  }
  disable(e = true) {
    return e === this._disabled ? this : (this._disabled = e, this.domElement.classList.toggle("disabled", e), this.$disable.toggleAttribute("disabled", e), this);
  }
  show(e = true) {
    return this._hidden = !e, this.domElement.style.display = this._hidden ? "none" : "", this;
  }
  hide() {
    return this.show(false);
  }
  options(e) {
    let o = this.parent.add(this.object, this.property, e);
    return o.name(this._name), this.destroy(), o;
  }
  min(e) {
    return this;
  }
  max(e) {
    return this;
  }
  step(e) {
    return this;
  }
  decimals(e) {
    return this;
  }
  listen(e = true) {
    return this._listening = e, this._listenCallbackID !== void 0 && (cancelAnimationFrame(this._listenCallbackID), this._listenCallbackID = void 0), this._listening && this._listenCallback(), this;
  }
  _listenCallback() {
    this._listenCallbackID = requestAnimationFrame(this._listenCallback);
    let e = this.save();
    e !== this._listenPrevValue && this.updateDisplay(), this._listenPrevValue = e;
  }
  getValue() {
    return this.object[this.property];
  }
  setValue(e) {
    return this.getValue() !== e && (this.object[this.property] = e, this._callOnChange(), this.updateDisplay()), this;
  }
  updateDisplay() {
    return this;
  }
  load(e) {
    return this.setValue(e), this._callOnFinishChange(), this;
  }
  save() {
    return this.getValue();
  }
  destroy() {
    this.listen(false), this.parent.children.splice(this.parent.children.indexOf(this), 1), this.parent.controllers.splice(this.parent.controllers.indexOf(this), 1), this.parent.$children.removeChild(this.domElement);
  }
};
var Z = class extends S {
  constructor(e, o, t2) {
    super(e, o, t2, "boolean", "label"), this.$input = document.createElement("input"), this.$input.setAttribute("type", "checkbox"), this.$input.setAttribute("aria-labelledby", this.$name.id), this.$widget.appendChild(this.$input), this.$input.addEventListener("change", () => {
      this.setValue(this.$input.checked), this._callOnFinishChange();
    }), this.$disable = this.$input, this.updateDisplay();
  }
  updateDisplay() {
    return this.$input.checked = this.getValue(), this;
  }
};
function Q(i3) {
  let e, o;
  return (e = i3.match(/(#|0x)?([a-f0-9]{6})/i)) ? o = e[2] : (e = i3.match(/rgb\(\s*(\d*)\s*,\s*(\d*)\s*,\s*(\d*)\s*\)/)) ? o = parseInt(e[1]).toString(16).padStart(2, 0) + parseInt(e[2]).toString(16).padStart(2, 0) + parseInt(e[3]).toString(16).padStart(2, 0) : (e = i3.match(/^#?([a-f0-9])([a-f0-9])([a-f0-9])$/i)) && (o = e[1] + e[1] + e[2] + e[2] + e[3] + e[3]), o ? "#" + o : false;
}
var De = { isPrimitive: true, match: (i3) => typeof i3 == "string", fromHexString: Q, toHexString: Q };
var U = { isPrimitive: true, match: (i3) => typeof i3 == "number", fromHexString: (i3) => parseInt(i3.substring(1), 16), toHexString: (i3) => "#" + i3.toString(16).padStart(6, 0) };
var Pe = { isPrimitive: false, match: (i3) => Array.isArray(i3), fromHexString(i3, e, o = 1) {
  let t2 = U.fromHexString(i3);
  e[0] = (t2 >> 16 & 255) / 255 * o, e[1] = (t2 >> 8 & 255) / 255 * o, e[2] = (t2 & 255) / 255 * o;
}, toHexString([i3, e, o], t2 = 1) {
  t2 = 255 / t2;
  let n = i3 * t2 << 16 ^ e * t2 << 8 ^ o * t2 << 0;
  return U.toHexString(n);
} };
var Ge = { isPrimitive: false, match: (i3) => Object(i3) === i3, fromHexString(i3, e, o = 1) {
  let t2 = U.fromHexString(i3);
  e.r = (t2 >> 16 & 255) / 255 * o, e.g = (t2 >> 8 & 255) / 255 * o, e.b = (t2 & 255) / 255 * o;
}, toHexString({ r: i3, g: e, b: o }, t2 = 1) {
  t2 = 255 / t2;
  let n = i3 * t2 << 16 ^ e * t2 << 8 ^ o * t2 << 0;
  return U.toHexString(n);
} };
var ze = [De, U, Pe, Ge];
function Be(i3) {
  return ze.find((e) => e.match(i3));
}
var q = class extends S {
  constructor(e, o, t2, n) {
    super(e, o, t2, "color"), this.$input = document.createElement("input"), this.$input.setAttribute("type", "color"), this.$input.setAttribute("tabindex", -1), this.$input.setAttribute("aria-labelledby", this.$name.id), this.$text = document.createElement("input"), this.$text.setAttribute("type", "text"), this.$text.setAttribute("spellcheck", "false"), this.$text.setAttribute("aria-labelledby", this.$name.id), this.$display = document.createElement("div"), this.$display.classList.add("display"), this.$display.appendChild(this.$input), this.$widget.appendChild(this.$display), this.$widget.appendChild(this.$text), this._format = Be(this.initialValue), this._rgbScale = n, this._initialValueHexString = this.save(), this._textFocused = false, this.$input.addEventListener("input", () => {
      this._setValueFromHexString(this.$input.value);
    }), this.$input.addEventListener("blur", () => {
      this._callOnFinishChange();
    }), this.$text.addEventListener("input", () => {
      let s = Q(this.$text.value);
      s && this._setValueFromHexString(s);
    }), this.$text.addEventListener("focus", () => {
      this._textFocused = true, this.$text.select();
    }), this.$text.addEventListener("blur", () => {
      this._textFocused = false, this.updateDisplay(), this._callOnFinishChange();
    }), this.$disable = this.$text, this.updateDisplay();
  }
  reset() {
    return this._setValueFromHexString(this._initialValueHexString), this;
  }
  _setValueFromHexString(e) {
    if (this._format.isPrimitive) {
      let o = this._format.fromHexString(e);
      this.setValue(o);
    } else this._format.fromHexString(e, this.getValue(), this._rgbScale), this._callOnChange(), this.updateDisplay();
  }
  save() {
    return this._format.toHexString(this.getValue(), this._rgbScale);
  }
  load(e) {
    return this._setValueFromHexString(e), this._callOnFinishChange(), this;
  }
  updateDisplay() {
    return this.$input.value = this._format.toHexString(this.getValue(), this._rgbScale), this._textFocused || (this.$text.value = this.$input.value.substring(1)), this.$display.style.backgroundColor = this.$input.value, this;
  }
};
var B = class extends S {
  constructor(e, o, t2) {
    super(e, o, t2, "function"), this.$button = document.createElement("button"), this.$button.appendChild(this.$name), this.$widget.appendChild(this.$button), this.$button.addEventListener("click", (n) => {
      n.preventDefault(), this.getValue().call(this.object), this._callOnChange();
    }), this.$button.addEventListener("touchstart", () => {
    }, { passive: true }), this.$disable = this.$button;
  }
};
var V = class extends S {
  constructor(e, o, t2, n, s, r) {
    super(e, o, t2, "number"), this._initInput(), this.min(n), this.max(s);
    let a = r !== void 0;
    this.step(a ? r : this._getImplicitStep(), a), this.updateDisplay();
  }
  decimals(e) {
    return this._decimals = e, this.updateDisplay(), this;
  }
  min(e) {
    return this._min = e, this._onUpdateMinMax(), this;
  }
  max(e) {
    return this._max = e, this._onUpdateMinMax(), this;
  }
  step(e, o = true) {
    return this._step = e, this._stepExplicit = o, this;
  }
  updateDisplay() {
    let e = this.getValue();
    if (this._hasSlider) {
      let o = (e - this._min) / (this._max - this._min);
      o = Math.max(0, Math.min(o, 1)), this.$fill.style.width = o * 100 + "%";
    }
    return this._inputFocused || (this.$input.value = this._decimals === void 0 ? e : e.toFixed(this._decimals)), this;
  }
  _initInput() {
    this.$input = document.createElement("input"), this.$input.setAttribute("type", "text"), this.$input.setAttribute("aria-labelledby", this.$name.id), window.matchMedia("(pointer: coarse)").matches && (this.$input.setAttribute("type", "number"), this.$input.setAttribute("step", "any")), this.$widget.appendChild(this.$input), this.$disable = this.$input;
    let o = () => {
      let b = parseFloat(this.$input.value);
      isNaN(b) || (this._stepExplicit && (b = this._snap(b)), this.setValue(this._clamp(b)));
    }, t2 = (b) => {
      let A = parseFloat(this.$input.value);
      isNaN(A) || (this._snapClampSetValue(A + b), this.$input.value = this.getValue());
    }, n = (b) => {
      b.key === "Enter" && this.$input.blur(), b.code === "ArrowUp" && (b.preventDefault(), t2(this._step * this._arrowKeyMultiplier(b))), b.code === "ArrowDown" && (b.preventDefault(), t2(this._step * this._arrowKeyMultiplier(b) * -1));
    }, s = (b) => {
      this._inputFocused && (b.preventDefault(), t2(this._step * this._normalizeMouseWheel(b)));
    }, r = false, a, l, p, c2, u2, g = 5, d = (b) => {
      a = b.clientX, l = p = b.clientY, r = true, c2 = this.getValue(), u2 = 0, window.addEventListener("mousemove", h), window.addEventListener("mouseup", m);
    }, h = (b) => {
      if (r) {
        let A = b.clientX - a, I = b.clientY - l;
        Math.abs(I) > g ? (b.preventDefault(), this.$input.blur(), r = false, this._setDraggingStyle(true, "vertical")) : Math.abs(A) > g && m();
      }
      if (!r) {
        let A = b.clientY - p;
        u2 -= A * this._step * this._arrowKeyMultiplier(b), c2 + u2 > this._max ? u2 = this._max - c2 : c2 + u2 < this._min && (u2 = this._min - c2), this._snapClampSetValue(c2 + u2);
      }
      p = b.clientY;
    }, m = () => {
      this._setDraggingStyle(false, "vertical"), this._callOnFinishChange(), window.removeEventListener("mousemove", h), window.removeEventListener("mouseup", m);
    }, v2 = () => {
      this._inputFocused = true;
    }, f = () => {
      this._inputFocused = false, this.updateDisplay(), this._callOnFinishChange();
    };
    this.$input.addEventListener("input", o), this.$input.addEventListener("keydown", n), this.$input.addEventListener("wheel", s, { passive: false }), this.$input.addEventListener("mousedown", d), this.$input.addEventListener("focus", v2), this.$input.addEventListener("blur", f);
  }
  _initSlider() {
    this._hasSlider = true, this.$slider = document.createElement("div"), this.$slider.classList.add("slider"), this.$fill = document.createElement("div"), this.$fill.classList.add("fill"), this.$slider.appendChild(this.$fill), this.$widget.insertBefore(this.$slider, this.$input), this.domElement.classList.add("hasSlider");
    let e = (f, b, A, I, Y) => (f - b) / (A - b) * (Y - I) + I, o = (f) => {
      let b = this.$slider.getBoundingClientRect(), A = e(f, b.left, b.right, this._min, this._max);
      this._snapClampSetValue(A);
    }, t2 = (f) => {
      this._setDraggingStyle(true), o(f.clientX), window.addEventListener("mousemove", n), window.addEventListener("mouseup", s);
    }, n = (f) => {
      o(f.clientX);
    }, s = () => {
      this._callOnFinishChange(), this._setDraggingStyle(false), window.removeEventListener("mousemove", n), window.removeEventListener("mouseup", s);
    }, r = false, a, l, p = (f) => {
      f.preventDefault(), this._setDraggingStyle(true), o(f.touches[0].clientX), r = false;
    }, c2 = (f) => {
      f.touches.length > 1 || (this._hasScrollBar ? (a = f.touches[0].clientX, l = f.touches[0].clientY, r = true) : p(f), window.addEventListener("touchmove", u2, { passive: false }), window.addEventListener("touchend", g));
    }, u2 = (f) => {
      if (r) {
        let b = f.touches[0].clientX - a, A = f.touches[0].clientY - l;
        Math.abs(b) > Math.abs(A) ? p(f) : (window.removeEventListener("touchmove", u2), window.removeEventListener("touchend", g));
      } else f.preventDefault(), o(f.touches[0].clientX);
    }, g = () => {
      this._callOnFinishChange(), this._setDraggingStyle(false), window.removeEventListener("touchmove", u2), window.removeEventListener("touchend", g);
    }, d = this._callOnFinishChange.bind(this), h = 400, m, v2 = (f) => {
      if (Math.abs(f.deltaX) < Math.abs(f.deltaY) && this._hasScrollBar) return;
      f.preventDefault();
      let A = this._normalizeMouseWheel(f) * this._step;
      this._snapClampSetValue(this.getValue() + A), this.$input.value = this.getValue(), clearTimeout(m), m = setTimeout(d, h);
    };
    this.$slider.addEventListener("mousedown", t2), this.$slider.addEventListener("touchstart", c2, { passive: false }), this.$slider.addEventListener("wheel", v2, { passive: false });
  }
  _setDraggingStyle(e, o = "horizontal") {
    this.$slider && this.$slider.classList.toggle("active", e), document.body.classList.toggle("lil-gui-dragging", e), document.body.classList.toggle("lil-gui-".concat(o), e);
  }
  _getImplicitStep() {
    return this._hasMin && this._hasMax ? (this._max - this._min) / 1e3 : 0.1;
  }
  _onUpdateMinMax() {
    !this._hasSlider && this._hasMin && this._hasMax && (this._stepExplicit || this.step(this._getImplicitStep(), false), this._initSlider(), this.updateDisplay());
  }
  _normalizeMouseWheel(e) {
    let { deltaX: o, deltaY: t2 } = e;
    return Math.floor(e.deltaY) !== e.deltaY && e.wheelDelta && (o = 0, t2 = -e.wheelDelta / 120, t2 *= this._stepExplicit ? 1 : 10), o + -t2;
  }
  _arrowKeyMultiplier(e) {
    let o = this._stepExplicit ? 1 : 10;
    return e.shiftKey ? o *= 10 : e.altKey && (o /= 10), o;
  }
  _snap(e) {
    let o = Math.round(e / this._step) * this._step;
    return parseFloat(o.toPrecision(15));
  }
  _clamp(e) {
    return e < this._min && (e = this._min), e > this._max && (e = this._max), e;
  }
  _snapClampSetValue(e) {
    this.setValue(this._clamp(this._snap(e)));
  }
  get _hasScrollBar() {
    let e = this.parent.root.$children;
    return e.scrollHeight > e.clientHeight;
  }
  get _hasMin() {
    return this._min !== void 0;
  }
  get _hasMax() {
    return this._max !== void 0;
  }
};
var ee = class extends S {
  constructor(e, o, t2, n) {
    super(e, o, t2, "option"), this.$select = document.createElement("select"), this.$select.setAttribute("aria-labelledby", this.$name.id), this.$display = document.createElement("div"), this.$display.classList.add("display"), this.$select.addEventListener("change", () => {
      this.setValue(this._values[this.$select.selectedIndex]), this._callOnFinishChange();
    }), this.$select.addEventListener("focus", () => {
      this.$display.classList.add("focus");
    }), this.$select.addEventListener("blur", () => {
      this.$display.classList.remove("focus");
    }), this.$widget.appendChild(this.$select), this.$widget.appendChild(this.$display), this.$disable = this.$select, this.options(n);
  }
  options(e) {
    return this._values = Array.isArray(e) ? e : Object.values(e), this._names = Array.isArray(e) ? e : Object.keys(e), this.$select.replaceChildren(), this._names.forEach((o) => {
      let t2 = document.createElement("option");
      t2.textContent = o, this.$select.appendChild(t2);
    }), this.updateDisplay(), this;
  }
  updateDisplay() {
    let e = this.getValue(), o = this._values.indexOf(e);
    return this.$select.selectedIndex = o, this.$display.textContent = o === -1 ? e : this._names[o], this;
  }
};
var te = class extends S {
  constructor(e, o, t2) {
    super(e, o, t2, "string"), this.$input = document.createElement("input"), this.$input.setAttribute("type", "text"), this.$input.setAttribute("spellcheck", "false"), this.$input.setAttribute("aria-labelledby", this.$name.id), this.$input.addEventListener("input", () => {
      this.setValue(this.$input.value);
    }), this.$input.addEventListener("keydown", (n) => {
      n.code === "Enter" && this.$input.blur();
    }), this.$input.addEventListener("blur", () => {
      this._callOnFinishChange();
    }), this.$widget.appendChild(this.$input), this.$disable = this.$input, this.updateDisplay();
  }
  updateDisplay() {
    return this.$input.value = this.getValue(), this;
  }
};
var Ue = '.lil-gui {\n  font-family: var(--font-family);\n  font-size: var(--font-size);\n  line-height: 1;\n  font-weight: normal;\n  font-style: normal;\n  text-align: left;\n  color: var(--text-color);\n  user-select: none;\n  -webkit-user-select: none;\n  touch-action: manipulation;\n  --background-color: #1f1f1f;\n  --text-color: #ebebeb;\n  --title-background-color: #111111;\n  --title-text-color: #ebebeb;\n  --widget-color: #424242;\n  --hover-color: #4f4f4f;\n  --focus-color: #595959;\n  --number-color: #2cc9ff;\n  --string-color: #a2db3c;\n  --font-size: 11px;\n  --input-font-size: 11px;\n  --font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Arial, sans-serif;\n  --font-family-mono: Menlo, Monaco, Consolas, "Droid Sans Mono", monospace;\n  --padding: 4px;\n  --spacing: 4px;\n  --widget-height: 20px;\n  --title-height: calc(var(--widget-height) + var(--spacing) * 1.25);\n  --name-width: 45%;\n  --slider-knob-width: 2px;\n  --slider-input-width: 27%;\n  --color-input-width: 27%;\n  --slider-input-min-width: 45px;\n  --color-input-min-width: 45px;\n  --folder-indent: 7px;\n  --widget-padding: 0 0 0 3px;\n  --widget-border-radius: 2px;\n  --checkbox-size: calc(0.75 * var(--widget-height));\n  --scrollbar-width: 5px;\n}\n.lil-gui, .lil-gui * {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n.lil-gui.root {\n  width: var(--width, 245px);\n  display: flex;\n  flex-direction: column;\n  background: var(--background-color);\n}\n.lil-gui.root > .title {\n  background: var(--title-background-color);\n  color: var(--title-text-color);\n}\n.lil-gui.root > .children {\n  overflow-x: hidden;\n  overflow-y: auto;\n}\n.lil-gui.root > .children::-webkit-scrollbar {\n  width: var(--scrollbar-width);\n  height: var(--scrollbar-width);\n  background: var(--background-color);\n}\n.lil-gui.root > .children::-webkit-scrollbar-thumb {\n  border-radius: var(--scrollbar-width);\n  background: var(--focus-color);\n}\n@media (pointer: coarse) {\n  .lil-gui.allow-touch-styles, .lil-gui.allow-touch-styles .lil-gui {\n    --widget-height: 28px;\n    --padding: 6px;\n    --spacing: 6px;\n    --font-size: 13px;\n    --input-font-size: 16px;\n    --folder-indent: 10px;\n    --scrollbar-width: 7px;\n    --slider-input-min-width: 50px;\n    --color-input-min-width: 65px;\n  }\n}\n.lil-gui.force-touch-styles, .lil-gui.force-touch-styles .lil-gui {\n  --widget-height: 28px;\n  --padding: 6px;\n  --spacing: 6px;\n  --font-size: 13px;\n  --input-font-size: 16px;\n  --folder-indent: 10px;\n  --scrollbar-width: 7px;\n  --slider-input-min-width: 50px;\n  --color-input-min-width: 65px;\n}\n.lil-gui.autoPlace {\n  max-height: 100%;\n  position: fixed;\n  top: 0;\n  right: 15px;\n  z-index: 1001;\n}\n\n.lil-gui .controller {\n  display: flex;\n  align-items: center;\n  padding: 0 var(--padding);\n  margin: var(--spacing) 0;\n}\n.lil-gui .controller.disabled {\n  opacity: 0.5;\n}\n.lil-gui .controller.disabled, .lil-gui .controller.disabled * {\n  pointer-events: none !important;\n}\n.lil-gui .controller > .name {\n  min-width: var(--name-width);\n  flex-shrink: 0;\n  white-space: pre;\n  padding-right: var(--spacing);\n  line-height: var(--widget-height);\n}\n.lil-gui .controller .widget {\n  position: relative;\n  display: flex;\n  align-items: center;\n  width: 100%;\n  min-height: var(--widget-height);\n}\n.lil-gui .controller.string input {\n  color: var(--string-color);\n}\n.lil-gui .controller.boolean {\n  cursor: pointer;\n}\n.lil-gui .controller.color .display {\n  width: 100%;\n  height: var(--widget-height);\n  border-radius: var(--widget-border-radius);\n  position: relative;\n}\n@media (hover: hover) {\n  .lil-gui .controller.color .display:hover:before {\n    content: " ";\n    display: block;\n    position: absolute;\n    border-radius: var(--widget-border-radius);\n    border: 1px solid #fff9;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n  }\n}\n.lil-gui .controller.color input[type=color] {\n  opacity: 0;\n  width: 100%;\n  height: 100%;\n  cursor: pointer;\n}\n.lil-gui .controller.color input[type=text] {\n  margin-left: var(--spacing);\n  font-family: var(--font-family-mono);\n  min-width: var(--color-input-min-width);\n  width: var(--color-input-width);\n  flex-shrink: 0;\n}\n.lil-gui .controller.option select {\n  opacity: 0;\n  position: absolute;\n  width: 100%;\n  max-width: 100%;\n}\n.lil-gui .controller.option .display {\n  position: relative;\n  pointer-events: none;\n  border-radius: var(--widget-border-radius);\n  height: var(--widget-height);\n  line-height: var(--widget-height);\n  max-width: 100%;\n  overflow: hidden;\n  word-break: break-all;\n  padding-left: 0.55em;\n  padding-right: 1.75em;\n  background: var(--widget-color);\n}\n@media (hover: hover) {\n  .lil-gui .controller.option .display.focus {\n    background: var(--focus-color);\n  }\n}\n.lil-gui .controller.option .display.active {\n  background: var(--focus-color);\n}\n.lil-gui .controller.option .display:after {\n  font-family: "lil-gui";\n  content: "↕";\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  padding-right: 0.375em;\n}\n.lil-gui .controller.option .widget,\n.lil-gui .controller.option select {\n  cursor: pointer;\n}\n@media (hover: hover) {\n  .lil-gui .controller.option .widget:hover .display {\n    background: var(--hover-color);\n  }\n}\n.lil-gui .controller.number input {\n  color: var(--number-color);\n}\n.lil-gui .controller.number.hasSlider input {\n  margin-left: var(--spacing);\n  width: var(--slider-input-width);\n  min-width: var(--slider-input-min-width);\n  flex-shrink: 0;\n}\n.lil-gui .controller.number .slider {\n  width: 100%;\n  height: var(--widget-height);\n  background: var(--widget-color);\n  border-radius: var(--widget-border-radius);\n  padding-right: var(--slider-knob-width);\n  overflow: hidden;\n  cursor: ew-resize;\n  touch-action: pan-y;\n}\n@media (hover: hover) {\n  .lil-gui .controller.number .slider:hover {\n    background: var(--hover-color);\n  }\n}\n.lil-gui .controller.number .slider.active {\n  background: var(--focus-color);\n}\n.lil-gui .controller.number .slider.active .fill {\n  opacity: 0.95;\n}\n.lil-gui .controller.number .fill {\n  height: 100%;\n  border-right: var(--slider-knob-width) solid var(--number-color);\n  box-sizing: content-box;\n}\n\n.lil-gui-dragging .lil-gui {\n  --hover-color: var(--widget-color);\n}\n.lil-gui-dragging * {\n  cursor: ew-resize !important;\n}\n\n.lil-gui-dragging.lil-gui-vertical * {\n  cursor: ns-resize !important;\n}\n\n.lil-gui .title {\n  height: var(--title-height);\n  line-height: calc(var(--title-height) - 4px);\n  font-weight: 600;\n  padding: 0 var(--padding);\n  -webkit-tap-highlight-color: transparent;\n  cursor: pointer;\n  outline: none;\n  text-decoration-skip: objects;\n}\n.lil-gui .title:before {\n  font-family: "lil-gui";\n  content: "▾";\n  padding-right: 2px;\n  display: inline-block;\n}\n.lil-gui .title:active {\n  background: var(--title-background-color);\n  opacity: 0.75;\n}\n@media (hover: hover) {\n  body:not(.lil-gui-dragging) .lil-gui .title:hover {\n    background: var(--title-background-color);\n    opacity: 0.85;\n  }\n  .lil-gui .title:focus {\n    text-decoration: underline var(--focus-color);\n  }\n}\n.lil-gui.root > .title:focus {\n  text-decoration: none !important;\n}\n.lil-gui.closed > .title:before {\n  content: "▸";\n}\n.lil-gui.closed > .children {\n  transform: translateY(-7px);\n  opacity: 0;\n}\n.lil-gui.closed:not(.transition) > .children {\n  display: none;\n}\n.lil-gui.transition > .children {\n  transition-duration: 300ms;\n  transition-property: height, opacity, transform;\n  transition-timing-function: cubic-bezier(0.2, 0.6, 0.35, 1);\n  overflow: hidden;\n  pointer-events: none;\n}\n.lil-gui .children:empty:before {\n  content: "Empty";\n  padding: 0 var(--padding);\n  margin: var(--spacing) 0;\n  display: block;\n  height: var(--widget-height);\n  font-style: italic;\n  line-height: var(--widget-height);\n  opacity: 0.5;\n}\n.lil-gui.root > .children > .lil-gui > .title {\n  border: 0 solid var(--widget-color);\n  border-width: 1px 0;\n  transition: border-color 300ms;\n}\n.lil-gui.root > .children > .lil-gui.closed > .title {\n  border-bottom-color: transparent;\n}\n.lil-gui + .controller {\n  border-top: 1px solid var(--widget-color);\n  margin-top: 0;\n  padding-top: var(--spacing);\n}\n.lil-gui .lil-gui .lil-gui > .title {\n  border: none;\n}\n.lil-gui .lil-gui .lil-gui > .children {\n  border: none;\n  margin-left: var(--folder-indent);\n  border-left: 2px solid var(--widget-color);\n}\n.lil-gui .lil-gui .controller {\n  border: none;\n}\n\n.lil-gui label, .lil-gui input, .lil-gui button {\n  -webkit-tap-highlight-color: transparent;\n}\n.lil-gui input {\n  border: 0;\n  outline: none;\n  font-family: var(--font-family);\n  font-size: var(--input-font-size);\n  border-radius: var(--widget-border-radius);\n  height: var(--widget-height);\n  background: var(--widget-color);\n  color: var(--text-color);\n  width: 100%;\n}\n@media (hover: hover) {\n  .lil-gui input:hover {\n    background: var(--hover-color);\n  }\n  .lil-gui input:active {\n    background: var(--focus-color);\n  }\n}\n.lil-gui input:disabled {\n  opacity: 1;\n}\n.lil-gui input[type=text],\n.lil-gui input[type=number] {\n  padding: var(--widget-padding);\n  -moz-appearance: textfield;\n}\n.lil-gui input[type=text]:focus,\n.lil-gui input[type=number]:focus {\n  background: var(--focus-color);\n}\n.lil-gui input[type=checkbox] {\n  appearance: none;\n  width: var(--checkbox-size);\n  height: var(--checkbox-size);\n  border-radius: var(--widget-border-radius);\n  text-align: center;\n  cursor: pointer;\n}\n.lil-gui input[type=checkbox]:checked:before {\n  font-family: "lil-gui";\n  content: "✓";\n  font-size: var(--checkbox-size);\n  line-height: var(--checkbox-size);\n}\n@media (hover: hover) {\n  .lil-gui input[type=checkbox]:focus {\n    box-shadow: inset 0 0 0 1px var(--focus-color);\n  }\n}\n.lil-gui button {\n  outline: none;\n  cursor: pointer;\n  font-family: var(--font-family);\n  font-size: var(--font-size);\n  color: var(--text-color);\n  width: 100%;\n  height: var(--widget-height);\n  text-transform: none;\n  background: var(--widget-color);\n  border-radius: var(--widget-border-radius);\n  border: none;\n}\n@media (hover: hover) {\n  .lil-gui button:hover {\n    background: var(--hover-color);\n  }\n  .lil-gui button:focus {\n    box-shadow: inset 0 0 0 1px var(--focus-color);\n  }\n}\n.lil-gui button:active {\n  background: var(--focus-color);\n}\n\n@font-face {\n  font-family: "lil-gui";\n  src: url("data:application/font-woff;charset=utf-8;base64,d09GRgABAAAAAAUsAAsAAAAACJwAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAABHU1VCAAABCAAAAH4AAADAImwmYE9TLzIAAAGIAAAAPwAAAGBKqH5SY21hcAAAAcgAAAD0AAACrukyyJBnbHlmAAACvAAAAF8AAACEIZpWH2hlYWQAAAMcAAAAJwAAADZfcj2zaGhlYQAAA0QAAAAYAAAAJAC5AHhobXR4AAADXAAAABAAAABMAZAAAGxvY2EAAANsAAAAFAAAACgCEgIybWF4cAAAA4AAAAAeAAAAIAEfABJuYW1lAAADoAAAASIAAAIK9SUU/XBvc3QAAATEAAAAZgAAAJCTcMc2eJxVjbEOgjAURU+hFRBK1dGRL+ALnAiToyMLEzFpnPz/eAshwSa97517c/MwwJmeB9kwPl+0cf5+uGPZXsqPu4nvZabcSZldZ6kfyWnomFY/eScKqZNWupKJO6kXN3K9uCVoL7iInPr1X5baXs3tjuMqCtzEuagm/AAlzQgPAAB4nGNgYRBlnMDAysDAYM/gBiT5oLQBAwuDJAMDEwMrMwNWEJDmmsJwgCFeXZghBcjlZMgFCzOiKOIFAB71Bb8AeJy1kjFuwkAQRZ+DwRAwBtNQRUGKQ8OdKCAWUhAgKLhIuAsVSpWz5Bbkj3dEgYiUIszqWdpZe+Z7/wB1oCYmIoboiwiLT2WjKl/jscrHfGg/pKdMkyklC5Zs2LEfHYpjcRoPzme9MWWmk3dWbK9ObkWkikOetJ554fWyoEsmdSlt+uR0pCJR34b6t/TVg1SY3sYvdf8vuiKrpyaDXDISiegp17p7579Gp3p++y7HPAiY9pmTibljrr85qSidtlg4+l25GLCaS8e6rRxNBmsnERunKbaOObRz7N72ju5vdAjYpBXHgJylOAVsMseDAPEP8LYoUHicY2BiAAEfhiAGJgZWBgZ7RnFRdnVJELCQlBSRlATJMoLV2DK4glSYs6ubq5vbKrJLSbGrgEmovDuDJVhe3VzcXFwNLCOILB/C4IuQ1xTn5FPilBTj5FPmBAB4WwoqAHicY2BkYGAA4sk1sR/j+W2+MnAzpDBgAyEMQUCSg4EJxAEAwUgFHgB4nGNgZGBgSGFggJMhDIwMqEAYAByHATJ4nGNgAIIUNEwmAABl3AGReJxjYAACIQYlBiMGJ3wQAEcQBEV4nGNgZGBgEGZgY2BiAAEQyQWEDAz/wXwGAAsPATIAAHicXdBNSsNAHAXwl35iA0UQXYnMShfS9GPZA7T7LgIu03SSpkwzYTIt1BN4Ak/gKTyAeCxfw39jZkjymzcvAwmAW/wgwHUEGDb36+jQQ3GXGot79L24jxCP4gHzF/EIr4jEIe7wxhOC3g2TMYy4Q7+Lu/SHuEd/ivt4wJd4wPxbPEKMX3GI5+DJFGaSn4qNzk8mcbKSR6xdXdhSzaOZJGtdapd4vVPbi6rP+cL7TGXOHtXKll4bY1Xl7EGnPtp7Xy2n00zyKLVHfkHBa4IcJ2oD3cgggWvt/V/FbDrUlEUJhTn/0azVWbNTNr0Ens8de1tceK9xZmfB1CPjOmPH4kitmvOubcNpmVTN3oFJyjzCvnmrwhJTzqzVj9jiSX911FjeAAB4nG3HMRKCMBBA0f0giiKi4DU8k0V2GWbIZDOh4PoWWvq6J5V8If9NVNQcaDhyouXMhY4rPTcG7jwYmXhKq8Wz+p762aNaeYXom2n3m2dLTVgsrCgFJ7OTmIkYbwIbC6vIB7WmFfAAAA==") format("woff");\n}';
function He2(i3) {
  let e = document.createElement("style");
  e.innerHTML = i3;
  let o = document.querySelector("head link[rel=stylesheet], head style");
  o ? document.head.insertBefore(e, o) : document.head.appendChild(e);
}
var fe = false;
var P = class i2 {
  constructor({ parent: e, autoPlace: o = e === void 0, container: t2, width: n, title: s = "Controls", closeFolders: r = false, injectStyles: a = true, touchStyles: l = true } = {}) {
    if (this.parent = e, this.root = e ? e.root : this, this.children = [], this.controllers = [], this.folders = [], this._closed = false, this._hidden = false, this.domElement = document.createElement("div"), this.domElement.classList.add("lil-gui"), this.$title = document.createElement("div"), this.$title.classList.add("title"), this.$title.setAttribute("role", "button"), this.$title.setAttribute("aria-expanded", true), this.$title.setAttribute("tabindex", 0), this.$title.addEventListener("click", () => this.openAnimated(this._closed)), this.$title.addEventListener("keydown", (p) => {
      (p.code === "Enter" || p.code === "Space") && (p.preventDefault(), this.$title.click());
    }), this.$title.addEventListener("touchstart", () => {
    }, { passive: true }), this.$children = document.createElement("div"), this.$children.classList.add("children"), this.domElement.appendChild(this.$title), this.domElement.appendChild(this.$children), this.title(s), this.parent) {
      this.parent.children.push(this), this.parent.folders.push(this), this.parent.$children.appendChild(this.domElement);
      return;
    }
    this.domElement.classList.add("root"), l && this.domElement.classList.add("allow-touch-styles"), !fe && a && (He2(Ue), fe = true), t2 ? t2.appendChild(this.domElement) : o && (this.domElement.classList.add("autoPlace"), document.body.appendChild(this.domElement)), n && this.domElement.style.setProperty("--width", n + "px"), this._closeFolders = r;
  }
  add(e, o, t2, n, s) {
    if (Object(t2) === t2) return new ee(this, e, o, t2);
    let r = e[o];
    switch (typeof r) {
      case "number":
        return new V(this, e, o, t2, n, s);
      case "boolean":
        return new Z(this, e, o);
      case "string":
        return new te(this, e, o);
      case "function":
        return new B(this, e, o);
    }
    console.error("gui.add failed\n	property:", o, "\n	object:", e, "\n	value:", r);
  }
  addColor(e, o, t2 = 1) {
    return new q(this, e, o, t2);
  }
  addFolder(e) {
    let o = new i2({ parent: this, title: e });
    return this.root._closeFolders && o.close(), o;
  }
  load(e, o = true) {
    return e.controllers && this.controllers.forEach((t2) => {
      t2 instanceof B || t2._name in e.controllers && t2.load(e.controllers[t2._name]);
    }), o && e.folders && this.folders.forEach((t2) => {
      t2._title in e.folders && t2.load(e.folders[t2._title]);
    }), this;
  }
  save(e = true) {
    let o = { controllers: {}, folders: {} };
    return this.controllers.forEach((t2) => {
      if (!(t2 instanceof B)) {
        if (t2._name in o.controllers) throw new Error('Cannot save GUI with duplicate property "'.concat(t2._name, '"'));
        o.controllers[t2._name] = t2.save();
      }
    }), e && this.folders.forEach((t2) => {
      if (t2._title in o.folders) throw new Error('Cannot save GUI with duplicate folder "'.concat(t2._title, '"'));
      o.folders[t2._title] = t2.save();
    }), o;
  }
  open(e = true) {
    return this._setClosed(!e), this.$title.setAttribute("aria-expanded", !this._closed), this.domElement.classList.toggle("closed", this._closed), this;
  }
  close() {
    return this.open(false);
  }
  _setClosed(e) {
    this._closed !== e && (this._closed = e, this._callOnOpenClose(this));
  }
  show(e = true) {
    return this._hidden = !e, this.domElement.style.display = this._hidden ? "none" : "", this;
  }
  hide() {
    return this.show(false);
  }
  openAnimated(e = true) {
    return this._setClosed(!e), this.$title.setAttribute("aria-expanded", !this._closed), requestAnimationFrame(() => {
      let o = this.$children.clientHeight;
      this.$children.style.height = o + "px", this.domElement.classList.add("transition");
      let t2 = (s) => {
        s.target === this.$children && (this.$children.style.height = "", this.domElement.classList.remove("transition"), this.$children.removeEventListener("transitionend", t2));
      };
      this.$children.addEventListener("transitionend", t2);
      let n = e ? this.$children.scrollHeight : 0;
      this.domElement.classList.toggle("closed", !e), requestAnimationFrame(() => {
        this.$children.style.height = n + "px";
      });
    }), this;
  }
  title(e) {
    return this._title = e, this.$title.textContent = e, this;
  }
  reset(e = true) {
    return (e ? this.controllersRecursive() : this.controllers).forEach((t2) => t2.reset()), this;
  }
  onChange(e) {
    return this._onChange = e, this;
  }
  _callOnChange(e) {
    this.parent && this.parent._callOnChange(e), this._onChange !== void 0 && this._onChange.call(this, { object: e.object, property: e.property, value: e.getValue(), controller: e });
  }
  onFinishChange(e) {
    return this._onFinishChange = e, this;
  }
  _callOnFinishChange(e) {
    this.parent && this.parent._callOnFinishChange(e), this._onFinishChange !== void 0 && this._onFinishChange.call(this, { object: e.object, property: e.property, value: e.getValue(), controller: e });
  }
  onOpenClose(e) {
    return this._onOpenClose = e, this;
  }
  _callOnOpenClose(e) {
    this.parent && this.parent._callOnOpenClose(e), this._onOpenClose !== void 0 && this._onOpenClose.call(this, e);
  }
  destroy() {
    this.parent && (this.parent.children.splice(this.parent.children.indexOf(this), 1), this.parent.folders.splice(this.parent.folders.indexOf(this), 1)), this.domElement.parentElement && this.domElement.parentElement.removeChild(this.domElement), Array.from(this.children).forEach((e) => e.destroy());
  }
  controllersRecursive() {
    let e = Array.from(this.controllers);
    return this.folders.forEach((o) => {
      e = e.concat(o.controllersRecursive());
    }), e;
  }
  foldersRecursive() {
    let e = Array.from(this.folders);
    return this.folders.forEach((o) => {
      e = e.concat(o.foldersRecursive());
    }), e;
  }
};
var J = P;
c();
c();
var E = (() => {
  let i3 = new Nt();
  return function(o) {
    return i3.set(o), "#".concat(i3.getHexString());
  };
})();
function me(i3) {
  let e;
  for (e of i3) e();
}
function ie(i3, e) {
  let o = window.location.href, t2 = new URL(o), n = new URLSearchParams(t2.search);
  for (let s in i3) if (i3.hasOwnProperty(s)) {
    let r = "".concat(e, ".").concat(s);
    n.set(r, i3[s]);
  }
  t2.search = n.toString(), history.pushState({ path: t2.toString() }, "", t2.toString());
}
function oe(i3, e) {
  let o = new URLSearchParams(window.location.search), t2 = {};
  for (let [n, s] of o) if (n.startsWith("".concat(i3, "."))) {
    let r = n.slice(i3.length + 1);
    s === "true" || s === "false" ? t2[r] = s === "true" : typeof (e == null ? void 0 : e[r]) == "number" ? t2[r] = Number(s) : t2[r] = s;
  }
  return { namespace: i3, params: t2 };
}
var je = ["interactive"];
function W(i3, e, o) {
  var n, s;
  let t2 = o.addFolder("".concat(e.type, "-").concat(e.id));
  for (let r in e) {
    if (r === "visible" && t2.add(e, r).onChange((a) => {
      i3.updateState(e.id, { [r]: a });
    }), r === "color" || r === "hoverColor") {
      e[r] = E(e[r]), t2.addColor(e, r).onChange((a) => {
        i3.updateState(e.id, { [r]: a });
      });
      continue;
    }
    if (r === "height") {
      t2.add(e, r, 0, 20, 1).onChange((a) => {
        i3.updateState(e.id, { [r]: a });
      });
      continue;
    }
    if (r === "texture" && e.texture) {
      (n = t2.addFolder("Texture - side").add(e, "texture")) == null || n.onChange((l) => {
        i3.updateState(e.id, { texture: { url: l } });
      });
      continue;
    }
    if (r === "topTexture" && e.topTexture) {
      (s = t2.addFolder("Texture - top").add(e, "topTexture")) == null || s.onChange((l) => {
        i3.updateState(e.id, { topTexture: { url: l } });
      });
      continue;
    }
    if (r === "opacity") {
      t2.add(e, r, 0, 1, 0.1).onChange((a) => {
        i3.updateState(e.id, { [r]: a });
      });
      continue;
    }
    je.includes(r) && t2.add(e, r).onChange((a) => {
      i3.updateState(e.id, { [r]: a });
    });
  }
  return e.isInView && (t2.add(e, "isInView").listen().disable(), t2.add(e, "isInViewCheck")), { cleanup() {
    t2.destroy();
  } };
}
c();
c();
function Ye() {
  let i3 = [];
  function e(n, s) {
    var l;
    let r = Object.values(n.getMapData())[0], a = s;
    if (a && He.is(a)) {
      let p = (l = r.getByType("enterprise-location")) == null ? void 0 : l.find((c2) => c2.spaces.some((u2) => u2.id === a.id));
      p && (a = p);
    }
    return a;
  }
  async function o(n, s) {
    return s instanceof Nd ? n.Camera.focusOn(s.locations.flatMap((r) => r.spaces), H) : s instanceof Li ? n.Camera.focusOn(s.spaces, H) : n.Camera.focusOn(s, H);
  }
  function t2(n, s, { focus: r = false } = {}) {
    if (!window.enableHighlightCard) return () => {
    };
    let a = e(n, s), l = document.createElement("div");
    if (l.style.cssText = "\n				position: absolute;\n				top: 20px;\n				left: 20px;\n				background-color: rgba(30, 30, 30, 0.95);\n				box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);\n				border-radius: 12px;\n				padding: 24px;\n				max-width: 320px;\n				z-index: 1000;\n				font-family: 'Arial', sans-serif;\n				transition: all 0.3s ease;\n				color: #e0e0e0;\n			", "name" in a) {
      let c2 = document.createElement("h3");
      c2.textContent = a.name, c2.style.cssText = "\n				margin: 0 0 16px;\n				font-size: 22px;\n				font-weight: 600;\n				color: #ffffff;\n				letter-spacing: -0.5px;\n			", l.appendChild(c2);
    }
    if (a instanceof Li) {
      if (a.description) {
        let c2 = document.createElement("p");
        c2.textContent = a.description, c2.style.cssText = "\n					margin: 0 0 16px;\n					font-size: 14px;\n					color: #b0b0b0;\n					line-height: 1.5;\n				", l.appendChild(c2);
      }
      if (a.tags && a.tags.length > 0) {
        let c2 = document.createElement("div");
        c2.style.cssText = "\n					display: flex;\n					flex-wrap: nowrap;\n					gap: 8px;\n					margin-bottom: 16px;\n					overflow-x: hidden;\n					max-height: 30px; /* Adjust this value based on your font size and padding */\n				", a.tags.forEach((u2) => {
          let g = document.createElement("span");
          g.textContent = u2, g.style.cssText = "\n						background-color: #3a3a3a;\n						color: #e0e0e0;\n						padding: 6px 12px;\n						border-radius: 16px;\n						font-size: 12px;\n						font-weight: 500;\n						text-transform: uppercase;\n						white-space: nowrap;\n					", c2.appendChild(g);
        }), l.appendChild(c2);
      }
    }
    let p;
    if (!(s instanceof Nd)) {
      let c2 = new J({ autoPlace: false });
      c2.domElement.style.cssText = "\n					position: relative;\n					overflow-y: auto;\n					margin-top: 16px;\n					border-top: 1px solid #444;\n					padding-top: 16px;\n				";
      let u2 = n.getState(s);
      u2 && (W(n, { id: s.id, ...u2 }, c2), l.appendChild(c2.domElement)), p = c2;
    }
    return document.body.appendChild(l), r && o(n, a), () => {
      l.style.opacity = "0", l.style.transform = "translateY(-10px)", setTimeout(() => l.remove(), 300), p == null || p.destroy();
    };
  }
  return { highlightCard: t2, highlight: (n, s, { focus: r = true } = {}) => {
    i3.length > 0 && i3.forEach((l) => n.Markers.remove(l));
    let a = e(n, s);
    if (a instanceof Li) r && n.Camera.focusOn(a.spaces, H), i3.push(...a.spaces.map((l) => n.Markers.add(l, '<div style="padding: 15px; background-color: #ffffff; border-radius: 8px; box-shadow: 0 4px 6px rgba(0,0,0,0.1); max-width: 250px; position: relative;">\n							<h3 style="margin: 0 0 10px; color: #333; font-size: 16px; font-weight: 600;">'.concat(a.name, "</h3>\n							").concat(a.description ? '<p style="margin: 0 0 10px; color: #666; font-size: 14px; font-weight: 400;">'.concat(a.description, "</p>") : "", "\n							").concat(a.tags ? a.tags.map((p) => '<span style="display: inline-block; padding: 3px 8px; background-color: #e0f2f1; color: #00796b; border-radius: 12px; font-size: 12px;">'.concat(p, "</span>")).join(" ") : "", '\n							<div style="position: absolute; bottom: -10px; left: 50%; transform: translateX(-50%); width: 0; height: 0; border-left: 10px solid transparent; border-right: 10px solid transparent; border-top: 10px solid #ffffff;"></div>\n						</div>'), { rank: "always-visible", anchor: "top" })));
    else if (a instanceof Nd) {
      r && n.Camera.focusOn(a.locations.flatMap((c2) => c2.spaces), H);
      let l = /* @__PURE__ */ new Map(), p = /* @__PURE__ */ new Set();
      a.locations.forEach((c2) => {
        l.has(c2.name) || (c2.spaces.forEach((u2) => {
          i3.push(n.Markers.add(u2, '<div style="padding: 12px; background-color: rgba(0, 153, 51, 0.95); border-radius: 8px; box-shadow: 0 4px 8px rgba(0,0,0,0.3); transform: translateY(-4px); transition: all 0.3s ease;">\n									<span style="font-weight: 600; color: #FFFFFF; font-size: 16px; text-shadow: 1px 1px 2px rgba(0,0,0,0.2);">'.concat(c2.name, "</span>\n								</div>"), { rank: "always-visible" }));
        }), l.set(c2.name, true));
      }), a.locations.forEach((c2) => {
        c2.coordinates.forEach((u2) => {
          let g = "".concat(u2.latitude, ",").concat(u2.longitude);
          if (!p.has(g) && !l.has(c2.name)) {
            let d = n.Markers.add(u2, '<div style="padding: 10px; background-color: rgba(51, 102, 204, 0.9); border-radius: 6px; box-shadow: 0 3px 6px rgba(0,0,0,0.2);">\n								<span style="font-weight: 500; color: #FFFFFF; font-size: 16px;">'.concat(c2.name, '</span>\n								<br>\n								<span style="color: #FFFFFF; font-size: 12px; font-weight: 400;">Node</span>\n							</div>'), { rank: "always-visible" });
            p.add(g), i3.push(d);
          }
        });
      });
    }
    return () => {
      i3.forEach((l) => n.Markers.remove(l));
    };
  } };
}
var H = { duration: 300, easing: "ease-in-out" };
var X = Ye();
c();
var M = { search: "", results: void 0, options: { places: { fields: { name: true, description: true, link: true, category: true }, limit: 5 }, locations: { fields: { name: true, tag: true, description: true }, limit: 5 }, categories: { fields: { name: true }, limit: 5 } } };
function Ne(i3) {
  i3.add(M.options.places.fields, "name").name("Places: Name"), i3.add(M.options.places.fields, "description").name("Places: Description"), i3.add(M.options.places.fields, "link").name("Places: Link"), i3.add(M.options.places.fields, "category").name("Places: Category"), i3.add(M.options.places, "limit"), i3.add(M.options.locations.fields, "name").name("Locations: Name"), i3.add(M.options.locations.fields, "tag").name("Locations: Tag"), i3.add(M.options.locations.fields, "description").name("Locations: Description"), i3.add(M.options.places, "limit"), i3.add(M.options.categories.fields, "name").name("Categories: Name");
}
function be(i3, e, o) {
  var c2;
  let t2 = new _n(), n = o.addFolder("Search");
  n.open();
  let s = n.add(M, "search").onChange(async (u2) => {
    let g = await e.Search.query(u2, M.options);
    g && (M.results = g, a(g, t2));
  }), r = document.createElement("div");
  r.style.marginLeft = "10px", (c2 = s.domElement.parentElement) == null || c2.appendChild(r);
  let { renderSearch: a, close: l } = Re(i3, e, r, s.$input), p = n.addFolder("Advanced");
  return p.close(), Ne(p), document.addEventListener("keydown", (u2) => {
    (u2.metaKey || u2.ctrlKey) && u2.key === "k" ? (u2.preventDefault(), n._closed && n.open(), s.$input.focus()) : u2.key === "Escape" && (l(), t2.publish("highlight", void 0));
  }), { pubsub: t2 };
}
function Re(i3, e, o, t2) {
  let n, s;
  t2.addEventListener("input", async (a) => {
    a instanceof InputEvent && (a.inputType === "insertText" || a.inputType === "insertCompositionText") && (clearTimeout(n), n = setTimeout(async () => {
      var p;
      let l = await e.Search.suggest(t2.value);
      l && l.length > 0 && r((p = l[0]) == null ? void 0 : p.suggestion);
    }, 100));
  });
  function r(a) {
    if (!a) {
      t2.placeholder = "";
      return;
    }
    let l = t2.value;
    t2.value = a, t2.setSelectionRange(l.length, a.length);
  }
  return { renderSearch(a, l) {
    var p, c2;
    if (a.places.length === 0 && ((p = a.enterpriseCategories) == null ? void 0 : p.length) === 0 && ((c2 = a.enterpriseLocations) == null ? void 0 : c2.length) === 0) {
      o.textContent = "No results found.";
      return;
    }
    s = Je(o, a, i3, l);
  }, close() {
    s.destroy();
  } };
}
function Je(i3, e, o, t2) {
  i3.innerHTML = "";
  let n = document.createElement("div");
  Object.assign(n.style, K2.dropdownContainer);
  let s = document.createElement("ul");
  s.className = "options-list", Object.assign(s.style, K2.optionsList), s.style.display = "block";
  let r = [], a = (g, d) => {
    if (d && d.length > 0) {
      let h = document.createElement("li");
      h.textContent = g, Object.assign(h.style, K2.sectionHeader), s.appendChild(h), d.forEach((m, v2) => {
        let f = document.createElement("li");
        f.textContent = "".concat("name" in m.item ? m.item.name : "", " (").concat(m.type, ")"), Object.assign(f.style, K2.option), f.tabIndex = 0, f.addEventListener("focus", () => {
          p(r.indexOf(f));
        }), f.addEventListener("mouseover", () => {
          f.style.backgroundColor = "#f0f0f0";
        }), f.addEventListener("mouseout", () => {
          f.style.backgroundColor = "";
        }), f.addEventListener("click", () => {
        }), f.setAttribute("data-type", g), f.setAttribute("data-index", v2.toString()), s.appendChild(f), r.push(f);
      });
    }
  };
  a("enterpriseLocations", e.enterpriseLocations), a("enterpriseCategories", e.enterpriseCategories), a("Places", e.places), n.appendChild(s), i3.appendChild(n);
  let l = [], p = (g) => {
    l.forEach((f) => f()), l = [], r.forEach((f, b) => {
      b === g ? f.style.backgroundColor = "#e0e0e0" : f.style.backgroundColor = "";
    });
    let d = r[g], h = d.getAttribute("data-type"), m = parseInt(d.getAttribute("data-index") || "0", 10);
    if (!h) return;
    let { item: v2 } = e[h.toLowerCase()][m];
    t2.publish("highlight", v2);
  }, c2 = (g) => {
    !n.contains(g.target) && g.target !== i3 && u2();
  };
  document.addEventListener("click", c2);
  let u2 = () => {
    i3.innerHTML = "", document.removeEventListener("click", c2);
  };
  return { destroy() {
    i3.innerHTML = "", t2.publish("highlight", void 0);
  } };
}
var K2 = { dropdownContainer: { position: "absolute", color: "#202020" }, optionsList: { display: "block", zIndex: "1002", position: "relative", maxHeight: "200px", overflowY: "auto", border: "1px solid #ccc", backgroundColor: "#fff", listStyleType: "none", margin: "0", padding: "0" }, sectionHeader: { fontWeight: "bold", padding: "5px", backgroundColor: "#f0f0f0" }, option: { padding: "5px", cursor: "pointer" } };
function ve(i3, e, o) {
  o.domElement.id = "interactionPanel";
  let t2 = [], { pubsub: n } = be(i3, e, o);
  n.on("highlight", (c2) => {
    if (c2) {
      t2.forEach((g) => g()), t2 = [];
      let u2 = c2 instanceof Li ? c2.spaces[0] : c2;
      if (i3.Camera.focusOn(c2), u2 && !He.is(u2)) return;
      t2.push(X.highlightCard(i3, u2, { focus: true }));
    } else t2.forEach((u2) => u2()), t2 = [];
  });
  let s = o.addFolder("Click 👇").close(), { sub: r } = We(i3, s);
  r.on("click", (c2) => {
    t2.forEach((u2) => u2()), t2 = [], c2.spaces[0] && (t2 = [X.highlightCard(i3, c2.spaces[0])]);
  });
  let a = o.addFolder("Hover 🚁").close(), { sub: l } = Xe(i3, a), p;
  l.on("hover", (c2) => {
    c2.spaces[0] ? (p == null || p(), t2.length === 0 && (p = X.highlightCard(i3, c2.spaces[0]))) : (p == null || p(), p = void 0);
  });
}
function We(i3, e) {
  let o = new _n(), t2 = { position: "", hoverColor: E(i3.getHoverColor()) }, n = e.add(t2, "position").disable(), s = [];
  function r() {
    s.forEach((l) => l()), s.length = 0;
  }
  let a = 0;
  return i3.on("click", (l) => {
    var h;
    let { labels: p, markers: c2, coordinate: u2 } = l;
    r(), o.publish("click", l), clearInterval(a), n.load(JSON.stringify([u2.longitude, u2.latitude]));
    let g = p[0] || c2[0];
    if (g) {
      let m = re(i3, g, e);
      if (!m) return;
      s.push(m.destroy), m.labelItemFolder.openAnimated();
    }
    let d = (h = l.spaces[0]) != null ? h : l.objects[0];
    if (d) {
      let m = { id: d.id, ...i3.getState(d.id), type: d.type, isInView: false, isInViewCheck: ne(i3, d.id) }, { cleanup: v2 } = W(i3, m, e);
      a = setInterval(() => {
        m.isInView = i3.isInView(g || d);
      }, 500), s.push(v2);
    }
  }), { sub: o };
}
function Xe(i3, e) {
  let o = new _n();
  i3.setHoverColor("#1f3a7a");
  let t2 = { position: "", hoverColor: E(i3.getHoverColor()), intersected: "", type: "", id: "" }, n = e.add(t2, "position").disable();
  e.add(t2, "id").disable().listen(), e.add(t2, "type").disable().listen(), e.addColor(t2, "hoverColor").onChange((a) => {
    i3.setHoverColor(a);
  });
  let s = [];
  function r() {
    s.forEach((a) => a()), s.length = 0;
  }
  return i3.on("hover", (a) => {
    var m, v2, f;
    let { coordinate: l, spaces: p, objects: c2, markers: u2, labels: g } = a;
    r(), o.publish("hover", a), n.load(JSON.stringify([l.longitude, l.latitude]));
    let d = (f = (v2 = (m = p[0]) != null ? m : c2[0]) != null ? v2 : u2[0]) != null ? f : g[0];
    if (!d) return;
    let h = i3.getState(d);
    h && (t2.type = h.type, t2.id = d.id);
  }), { sub: o };
}
function ne(i3, e) {
  return function() {
    console.log("isInView", i3.isInView(e));
  };
}
function ye(i3, e, o) {
  let t2 = { labels: {}, all() {
    o.Labels.all().forEach((d) => {
      this.labels[d.id] = d;
    }), l();
  }, removeAllLabels() {
    o.Labels.removeAll().forEach((d) => {
      delete this.labels[d.id];
    }), l();
  } }, { addLabel: n, destroy: s } = Ke(i3, o);
  i3.add(t2, "all"), i3.add(t2, "removeAllLabels");
  let r = i3.addFolder("Label List");
  i3.close();
  let a = /* @__PURE__ */ new Map(), { rerender: l } = p();
  function p() {
    function g(m) {
      var v2;
      delete t2.labels[m.id], (v2 = a.get(m.id)) == null || v2.destroy();
    }
    function d(m) {
      let v2 = re(o, m, r, { onRemove: (b) => {
        g(b);
      } });
      if (!v2) return;
      let { labelItemFolder: f } = v2;
      a.set(m.id, f);
    }
    function h() {
      r.destroy(), r = i3.addFolder("Label");
      for (let m in t2.labels) {
        let v2 = t2.labels[m];
        d(v2);
      }
    }
    return { rerender: h, add: d, remove: g };
  }
  i3.domElement.classList.add("list-items");
  let c2;
  o.on("click", ({ labels: g, coordinate: d }) => {
    if (!i3._closed) if (g[0]) {
      c2 == null || c2.close();
      let h = a.get(g[0].id);
      if (i3.open(), !h) return;
      h == null || h.open(), h == null || h.domElement.scrollIntoView({ block: "start" }), h == null || h.domElement.focus(), c2 = h;
    } else n(d);
  });
  function u2(g) {
    for (let d of g) t2.labels[d.id] = d;
    l();
  }
  return { populatelabels: u2, destroy() {
    s();
  } };
}
function re(i3, e, o, { onRemove: t2 } = {}) {
  var p, c2, u2, g;
  let n = o.addFolder("".concat((p = e.text) == null ? void 0 : p.substring(0, 12)));
  n.onChange((d) => {
    i3.updateState(e, { appearance: l.appearance, interactive: l.interactive });
  }), n.close();
  let s = i3.getState(e);
  if ((s == null ? void 0 : s.type) !== "label") throw new Error("error getting state for label: ".concat(e.id));
  let { appearance: r, interactive: a } = s;
  if (!r || r.margin == null || a == null) throw new Error("incomplte label state");
  let l = { text: e.text, interactive: a, appearance: { ...r, margin: r.margin || 0, marker: { foregroundColor: (u2 = (c2 = r.marker) == null ? void 0 : c2.foregroundColor) != null && u2.active ? E((g = r.marker.foregroundColor) == null ? void 0 : g.active) : "black" }, text: { foregroundColor: E(r.text.foregroundColor) } }, remove() {
    i3.Labels.remove(e), t2 == null || t2(e), n.destroy();
  }, isInView: ne(i3, e.id) };
  return n.add(l.appearance, "margin", 0, 20).name("margin"), n.add(l, "text"), n.add(l, "interactive"), n.addColor(l.appearance.marker, "foregroundColor").name("marker foreground"), n.addColor(l.appearance.text, "foregroundColor").name("text forground"), n.add(l, "isInView"), n.add(l, "remove"), { labelItemFolder: n, destroy() {
    n.destroy();
  } };
}
function Ke(i3, e) {
  let o = i3.addFolder("Add"), t2 = { onClick: false, margin: 0, text: "New Label!", interactive: true, marginForegroundColor: E("skyblue"), marginBackgroundColor: E("coral"), textForegroundColor: E("slategray"), textBackgroundColor: E("white") };
  return o.add(t2, "onClick"), o.add(t2, "margin"), o.add(t2, "interactive"), o.add(t2, "text"), o.addColor(t2, "marginForegroundColor"), o.addColor(t2, "marginBackgroundColor"), o.addColor(t2, "textForegroundColor"), o.addColor(t2, "textBackgroundColor"), { destroy() {
    o.destroy();
  }, addLabel(n) {
    return o._closed || !t2.onClick ? void 0 : e.Labels.add(n, t2.text, { appearance: { margin: t2.margin, marker: { foregroundColor: { active: t2.marginForegroundColor, inactive: t2.marginForegroundColor }, backgroundColor: { active: t2.marginBackgroundColor, inactive: t2.marginBackgroundColor } }, text: { foregroundColor: t2.textForegroundColor, backgroundColor: t2.marginBackgroundColor } }, interactive: t2.interactive });
  } };
}
var Ce = {};
c();
var xe = "camera-ui";
function Ae(i3, e, o) {
  var Y, de;
  let t2 = i3.addFolder("Camera 📷").onOpenClose((x2) => {
    ie({ opened: !x2._closed }, xe);
  }), { params: n } = oe(xe);
  n.opened || t2.close();
  let s = e.Camera.center.toJSON(), r = document.createElement("div");
  Object.assign(r.style, { display: "none", position: "absolute", left: "0px", zIndex: 999, top: "0px", bottom: "0px", right: "0px", backgroundColor: "aqua", pointerEvents: "none", opacity: 0.5 }), e.__core.container.appendChild(r);
  let { innerHeight: a, innerWidth: l } = window, [p, c2, u2, g] = (Y = o == null ? void 0 : o.padding) != null ? Y : [e.Camera.screenOffsets.top, e.Camera.screenOffsets.right, e.Camera.screenOffsets.bottom, e.Camera.screenOffsets.left], d = { center_lat: s.latitude, center_lon: s.longitude, zoomLevel: e.Camera.zoomLevel, pitch: e.Camera.pitch, bearing: e.Camera.bearing, minZoomLevel: e.Camera.minZoomLevel, maxZoomLevel: e.Camera.maxZoomLevel, inset_type: o != null && o.padding ? "pixel" : e.Camera.screenOffsets.type, inset_top: p != null ? p : 0, inset_left: g != null ? g : 0, inset_right: c2 != null ? c2 : 0, inset_bottom: u2 != null ? u2 : 0, animateOnLoad: true, persist: () => {
    ie(t2.save().controllers, "camera"), navigator.clipboard.writeText(window.location.href);
  }, visualizeInset: !!(p || c2 || u2 || g), "Focus on click": (de = o == null ? void 0 : o.focusOnClick) != null ? de : true, "Focus on current floor": () => {
    e.Camera.focusOn([e.currentFloor], { screenOffsets: { top: 20, left: 20, right: 20, bottom: 20 } });
  } };
  function h() {
    d.inset_type = e.Camera.screenOffsets.type, d.inset_left = e.Camera.screenOffsets.left, d.inset_top = e.Camera.screenOffsets.top, d.inset_right = e.Camera.screenOffsets.right, d.inset_bottom = e.Camera.screenOffsets.bottom, d.inset_type === "portion" ? Object.assign(r.style, { left: d.inset_left * l + "px", top: d.inset_top * a + "px", bottom: d.inset_bottom * a + "px", right: d.inset_right * l + "px" }) : Object.assign(r.style, { left: d.inset_left + "px", top: d.inset_top + "px", bottom: d.inset_bottom + "px", right: d.inset_right + "px" });
  }
  t2.add(d, "center_lat").listen().disable(), t2.add(d, "center_lon").listen().disable(), t2.add(d, "zoomLevel", 16, 22, 0.5).listen().disable(), t2.add(d, "pitch").listen().disable(), t2.add(d, "bearing").listen().disable(), t2.add(d, "minZoomLevel", 5, 22, 0.5).onChange((x2) => {
    e.Camera.setMinZoomLevel(x2);
  }), t2.add(d, "maxZoomLevel", 10, 22, 0.5).onChange((x2) => {
    e.Camera.setMaxZoomLevel(x2);
  }), t2.add(d, "animateOnLoad"), t2.add(d, "visualizeInset").onChange(I), I(d.visualizeInset), t2.add(d, "inset_type", ["pixel", "portion"]).onChange(A), t2.add(d, "inset_top", 0, a).onChange(A), t2.add(d, "inset_bottom", 0, a).onChange(A), t2.add(d, "inset_left", 0, l).onChange(A), t2.add(d, "inset_right", 0, l).onChange(A);
  let m = Qe(e);
  t2.add(d, "Focus on click").onChange((x2) => {
    x2 ? e.on("click", m) : e.off("click", m);
  }), d["Focus on click"] && e.on("click", m), t2.add(d, "persist"), t2.add(d, "Focus on current floor");
  let v2 = (x2) => {
    t2._closed || (d.center_lat = x2.center.latitude, d.center_lon = x2.center.longitude, d.zoomLevel = x2.zoomLevel, d.bearing = x2.bearing, d.pitch = x2.pitch);
  };
  e.on("camera-change", v2);
  let { params: f } = oe("camera", d);
  if (Object.keys(f).length > 0) {
    let x2 = f;
    e.Camera.setScreenOffsets({ top: x2.inset_top, left: x2.inset_left, right: x2.inset_right, bottom: x2.inset_bottom, type: x2.inset_type });
    let ce = { pitch: x2.pitch, center: new K(x2.center_lat, x2.center_lon), bearing: x2.bearing, zoomLevel: x2.zoomLevel };
    x2.animateOnLoad ? e.Camera.animateTo(ce) : e.Camera.set(ce), t2.load({ controllers: x2, folders: {} }), h();
  }
  let b = [() => {
    e.off("camera-change", v2);
  }];
  function A() {
    e.Camera.setScreenOffsets({ top: d.inset_top, left: d.inset_left, right: d.inset_right, bottom: d.inset_bottom, type: d.inset_type }), h();
  }
  (d.inset_top || d.inset_right || d.inset_bottom || d.inset_left) && A();
  function I(x2) {
    h(), x2 ? r.style.display = "block" : r.style.display = "none";
  }
  return () => ({ destroy() {
    t2.destroy(), me(b);
  } });
}
function Qe(i3) {
  return function(o) {
    var r;
    let { spaces: t2, objects: n } = o, s = (r = t2[0]) != null ? r : n[0];
    s && i3.Camera.focusOn(s);
  };
}
c();
function ke(i3, e, o) {
  let t2 = { markers: {}, removeAllMarkers() {
    o.Markers.removeAll().forEach((d) => {
      delete this.markers[d.id];
    }), l();
  } }, { addMarker: n, destroy: s } = Ve(i3, o);
  i3.add(t2, "removeAllMarkers");
  let r = i3.addFolder("Marker List");
  i3.close();
  let a = /* @__PURE__ */ new Map(), { rerender: l } = p();
  function p() {
    function g(m) {
      var v2;
      delete t2.markers[m.id], (v2 = a.get(m.id)) == null || v2.destroy();
    }
    function d(m) {
      let v2 = qe(o, m, r, { onRemove: (b) => {
        g(b);
      } });
      if (!v2) return;
      let { markerItemFolder: f } = v2;
      a.set(m.id, f);
    }
    function h() {
      r.destroy(), r = i3.addFolder("marker");
      for (let m in t2.markers) {
        let v2 = t2.markers[m];
        d(v2);
      }
    }
    return { rerender: h, add: d, remove: g };
  }
  i3.domElement.classList.add("list-items");
  let c2;
  o.on("click", ({ markers: g, coordinate: d }) => {
    if (!i3._closed) if (g[0]) {
      c2 == null || c2.close();
      let h = a.get(g[0].id);
      if (i3.open(), !h) return;
      h == null || h.open(), h == null || h.domElement.scrollIntoView({ block: "start" }), h == null || h.domElement.focus(), c2 = h;
    } else n(d);
  });
  function u2(g) {
    for (let d of g) t2.markers[d.id] = d;
    l();
  }
  return { populateMarkers: u2, destroy() {
    s();
  } };
}
function qe(i3, e, o, { onRemove: t2 } = {}) {
  let n = o.addFolder("".concat(e.id.toString().substring(0, 8)));
  n.onChange((l) => {
    i3.updateState(e, { interactive: a.interactive });
  }), n.close();
  let s = i3.getState(e);
  if ((s == null ? void 0 : s.type) !== "marker") throw new Error("error getting state for marker: ".concat(e.id));
  let { interactive: r } = s;
  if (r == null) throw new Error("incomplte label state");
  let a = { interactive: r, remove() {
    i3.Markers.remove(e), t2 == null || t2(e), n.destroy();
  } };
  return n.add(a, "interactive"), n.add(a, "remove"), { markerItemFolder: n, destroy() {
    n.destroy();
  } };
}
function Ve(i3, e) {
  let o = i3.addFolder("Add"), t2 = { onClick: false, interactive: true };
  return o.add(t2, "onClick"), o.add(t2, "interactive"), { destroy() {
    o.destroy();
  }, addMarker(n) {
    return o._closed || !t2.onClick ? void 0 : e.Markers.add(n, "<div>New Marker</div>", { interactive: t2.interactive });
  } };
}
c();
function _e(i3, e) {
  let o = i3.addFolder("Walls").close(), t2 = { visible: true, topColor: "#b1fa87", color: "#e8e8e8", texture: { url: "" }, topTexture: { url: "" } };
  o.add(t2, "visible").onChange((r) => {
    e.updateState("walls", { visible: r });
  }), o.addColor(t2, "topColor").onChange((r) => {
    e.updateState("walls", { topColor: r });
  }), o.addColor(t2, "color").onChange((r) => {
    e.updateState("walls", { color: r });
  }), o.addFolder("Texture - side").add(t2.texture, "url").onFinishChange((r) => {
    e.updateState("walls", { texture: { url: r } });
  }), o.addFolder("Texture - top").add(t2.topTexture, "url").onFinishChange((r) => {
    e.updateState("walls", { topTexture: { url: r } });
  }), e.updateState("walls", { topColor: t2.topColor }), e.updateState("walls", { color: t2.color });
}
c();
function Me(i3, e, o) {
  var s, r;
  i3.close();
  let t2 = { language: (r = (s = o.currentLanguage) == null ? void 0 : s.code) != null ? r : "en" }, n = o.getByType("enterprise-venue");
  i3.add(t2, "language", n == null ? void 0 : n.languages.map((a) => a.code)).onChange((a) => {
    o.changeLanguage(a);
  });
}
c();
function Ee(i3, e, o) {
  let t2 = i3.addFolder("Debug");
  t2.close();
  let n = { showPolygonLabelTextAreaMesh: false };
  t2.add(n, "showPolygonLabelTextAreaMesh").onChange((s) => {
    e.Debug.update({ showPolygonLabelTextAreaMesh: s });
  }).name("Show Flat Label Text Area Mesh"), e.Debug.update(n);
}
c();
function we(i3, e, o) {
  let t2 = i3.addFolder("Text3D").close(), n = { all: () => {
    e.Text3D.labelAll();
  }, removeAll: () => {
    e.Text3D.removeAll();
  } };
  t2.add(n, "all").name("Show All"), t2.add(n, "removeAll").name("Remove All");
}
c();
c();
c();
var w2;
var j;
var L;
var k;
var $;
var F;
var Fe;
var ae;
var Se;
var se = class {
  constructor(e = new P({ autoPlace: true })) {
    v(this, F);
    v(this, w2);
    v(this, j, []);
    v(this, L, {});
    v(this, k, {});
    v(this, $, {});
    w(this, w2, e), u(this, w2).domElement.style.left = "0";
  }
  add(e, o, t2) {
    if (u(this, k)[e]) throw new Error("Control ".concat(e, " already exists"));
    u(this, L)[e] = o, u(this, $)[e] = o.default, x(this, F, Fe).call(this, e, o, t2), this.show();
  }
  addColor(e, o, t2) {
    if (u(this, k)[e]) throw new Error("Control ".concat(e, " already exists"));
    u(this, L)[e] = o, u(this, $)[e] = o.default, x(this, F, Se).call(this, e, o, t2), this.show();
  }
  update(e, o) {
    if (!u(this, k)[e]) throw new Error("Control ".concat(e, " does not exist"));
    u(this, k)[e].setValue(o), u(this, L)[e].onChange && u(this, L)[e].onChange(o, e);
  }
  replace(e, o, t2) {
    if (!u(this, k)[e]) {
      this.add(e, o, t2);
      return;
    }
    o.args && u(this, k)[e].options(o.args), o.default && u(this, k)[e].setValue(o.default), o.onChange && u(this, k)[e].onChange((n) => {
      o.onChange(n, e);
    });
  }
  remove(e) {
    if (!u(this, k)[e]) throw new Error("Control ".concat(e, " does not exist"));
    u(this, k)[e].destroy(), u(this, k)[e].parent.children.length === 0 && u(this, k)[e].parent.hide(), delete u(this, k)[e], delete u(this, L)[e], delete u(this, $)[e];
  }
  show() {
    u(this, w2).show();
  }
  hide() {
    u(this, w2).hide();
  }
  removeAll() {
    for (let e in u(this, k)) this.remove(e);
  }
  destroy() {
    u(this, w2).destroy();
  }
};
w2 = /* @__PURE__ */ new WeakMap(), j = /* @__PURE__ */ new WeakMap(), L = /* @__PURE__ */ new WeakMap(), k = /* @__PURE__ */ new WeakMap(), $ = /* @__PURE__ */ new WeakMap(), F = /* @__PURE__ */ new WeakSet(), Fe = function(e, o, t2) {
  let s = x(this, F, ae).call(this, t2).add(u(this, $), e, o.args, o.max, o.step);
  o.onChange && s.onChange((r) => {
    o.onChange(r, e);
  }), o.onAdd && o.onAdd(o.default, e), u(this, k)[e] = s;
}, ae = function(e) {
  if (!e) return u(this, w2);
  let o = u(this, j).find((t2) => t2._title === e);
  return o ? (o.show(), o) : (o = u(this, w2).addFolder(e), u(this, j).push(o), o);
}, Se = function(e, o, t2) {
  let s = x(this, F, ae).call(this, t2).addColor(u(this, $), e);
  o.onChange && s.onChange((r) => {
    o.onChange(r, e);
  }), u(this, k)[e] = s;
};
function et(i3, e, o) {
  var a;
  let t2 = {}, n = i3.getByType("floor"), s = i3.getByType("floor-stack");
  s.length > 1 && (t2.FloorStack = { default: e.currentFloorStack.id, args: s.reduce((l, { id: p, name: c2 }) => ({ ...l, [c2]: p }), {}), onChange: (l) => {
    l !== e.currentFloorStack.id && (e.setFloorStack(l), o.replace("Floor", { default: e.currentFloor.id, args: e.currentFloorStack.floors.reduce((p, { id: c2, name: u2 }) => ({ ...p, [u2]: c2 }), {}) }));
  } }), n.length > 1 && (t2.Floor = { default: e.currentFloor.id, args: e.currentFloorStack.floors.reduce((l, { id: p, name: c2 }) => ({ ...l, [c2]: p }), {}), onChange: (l) => {
    l !== e.currentFloor.id && e.setFloor(l);
  }, onAdd: () => {
    e.on("floor-change", (l) => {
      l != null && l.floor.id && (s.length > 1 && o.replace("FloorStack", { default: e.currentFloorStack.id }), o.replace("Floor", { default: e.currentFloor.id, args: e.currentFloorStack.floors.reduce((c2, { id: u2, name: g }) => ({ ...c2, [g]: u2 }), {}) }));
    });
  } });
  let r = i3.getByType("enterprise-venue");
  return r && r.languages.length > 1 && (t2.Language = { default: ((a = i3.currentLanguage) == null ? void 0 : a.code) || r.languages[0].code, args: r.languages.reduce((l, { code: p, name: c2 }) => ({ ...l, [c2]: p }), {}), onChange: (l) => {
    i3.changeLanguage(l);
  } }), t2;
}
function Le(i3, e, o = new P()) {
  let t2 = new se(o), n = et(i3, e, t2);
  Object.keys(n).length || t2.hide();
  for (let s in n) t2.add(s, n[s]);
  return t2;
}
async function $e(i3, e, { initialfloorsInStack: o, root: t2, floorsInDirections: n, showLabelsPerFloor: s = true }) {
  async function r(h) {
    i3.StackedMaps.changeFloorOnElevationChanges(false), i3.Outdoor.setOpacity(0.15), i3.StackedMaps.setFloorVisiblityMode("only-current-floor"), i3.Camera.setPanMode("default"), await i3.Camera.focusOn(h, { pitch: 10 });
  }
  async function a() {
    i3.Outdoor.setOpacity(0.25), i3.StackedMaps.changeFloorOnElevationChanges(true), i3.Camera.setPanMode("elevation"), i3.StackedMaps.setFloorVisiblityMode("all-floors"), await i3.Camera.focusOn(i3.currentFloor, { axisAlignedPadding: { vertical: i3.StackedMaps.distanceBetweenFloors }, pitch: 90 });
  }
  async function l(h) {
    await i3.Camera.animateElevation(h.elevation * i3.StackedMaps.distanceBetweenFloors);
  }
  let p = i3.currentFloor;
  i3.on("floor-change", async (h) => {
    i3.StackedMaps.expanded && h.reason !== "stacked-maps-elevation-change" && (i3.StackedMaps.changeFloorOnElevationChanges(false), i3.StackedMaps.setFloorVisiblityMode("all-floors"), await i3.Camera.focusOn(p, { axisAlignedPadding: { vertical: i3.StackedMaps.distanceBetweenFloors }, pitch: 90, duration: 500 }), i3.StackedMaps.changeFloorOnElevationChanges(true), await l(i3.currentFloor), await r(i3.currentFloor), i3.StackedMaps.setFloorVisiblityMode("only-current-floor")), p = i3.currentFloor;
  }), i3.on("stacked-maps-state-change", ({ state: h }) => {
    console.log("stacked-maps-state-change", h);
  });
  let c2 = e.getByType("space");
  if (s) {
    let h = c2.reduce((m, v2) => (m.has(v2.floor) || m.set(v2.floor, []), v2.name && v2.name !== "" && m.get(v2.floor).push(i3.Labels.add(v2, v2.name)), m), /* @__PURE__ */ new Map());
    i3.on("floor-change", () => {
      h.forEach((m, v2) => {
        m.forEach((f) => {
          i3.updateState(f, { enabled: i3.currentFloor === v2 });
        });
      });
    });
  }
  let u2 = Le(e, i3, t2), g = o != null ? o : [];
  async function d() {
    i3.Outdoor.setOpacity(0.25), g = e.getByType("floor"), await i3.Camera.animateTo({ pitch: 90 }), await i3.StackedMaps.collapse(), i3.StackedMaps.clearCachedFloorSeparationDistance(), await i3.StackedMaps.expand({ distanceBetweenFloors: "auto" });
  }
  return u2.add("Expand - All", { default: async () => {
    await d();
  } }, "Stack Maps"), n && u2.add("Expand - Only Navigation", { default: async () => {
    i3.Outdoor.setOpacity(0.25), g = n, await i3.StackedMaps.collapse(), i3.setFloor(n[0]), await i3.StackedMaps.expand({ includedFloors: n, distanceBetweenFloors: "auto" });
  } }, "Stack Maps"), u2.add("Show All Floors", { default: async () => {
    g = e.getByType("floor"), i3.Outdoor.setOpacity(0.25), i3.StackedMaps.setFloorVisiblityMode("all-floors"), i3.StackedMaps.changeFloorOnElevationChanges(false), i3.Camera.setPanMode("elevation"), i3.Camera.focusOn(g, { pitch: 90 });
  } }, "Stack Maps"), u2.add("Show Current Floor with padding", { default: async () => {
    await a();
  } }, "Stack Maps"), u2.add("Zoom to Current Floor", { default: async () => {
    r(i3.currentFloor);
  } }, "Stack Maps"), u2.add("Collapse", { default: () => {
    i3.Outdoor.setOpacity("initial"), i3.StackedMaps.collapse();
  } }, "Stack Maps"), u2.add("Default", { default: async () => {
    i3.Camera.setPanMode("default");
  } }, "Camera Pan Mode"), u2.add("Elevation", { default: async () => {
    i3.Camera.setPanMode("elevation");
  } }, "Camera Pan Mode"), u2.add("zoom in to floor 2", { default: async () => {
    i3.Outdoor.setOpacity(0.25), console.log(i3.currentFloor.name), await i3.Camera.focusOn(i3.currentFloor, { axisAlignedPadding: { vertical: i3.StackedMaps.distanceBetweenFloors }, pitch: 90 }), i3.StackedMaps.expanded || await i3.StackedMaps.expand({ distanceBetweenFloors: i3.StackedMaps.distanceBetweenFloors });
    let h = i3.StackedMaps.includedFloors[2], m = g.findIndex((v2) => v2.id === h.id);
    i3.StackedMaps.changeFloorOnElevationChanges(true), i3.Camera.setPanMode("elevation"), i3.StackedMaps.setFloorVisiblityMode("all-floors"), await i3.Camera.animateElevation(m * i3.StackedMaps.distanceBetweenFloors), i3.Outdoor.setOpacity(0.15), console.log("focusing on", h.name), await i3.Camera.focusOn(h, { pitch: 10 }), i3.StackedMaps.setFloorVisiblityMode("only-current-floor"), i3.Camera.setPanMode("default"), i3.StackedMaps.changeFloorOnElevationChanges(false);
  } }, "Camera Pan Mode"), u2.add("All Floors", { default: async () => {
    i3.StackedMaps.setFloorVisiblityMode("all-floors");
  } }, "Visibility Mode"), u2.add("Only Active Floor", { default: async () => {
    i3.StackedMaps.setFloorVisiblityMode("only-current-floor");
  } }, "Visibility Mode"), u2.add("Up", { default: async () => {
    let h = g.find((m) => m.elevation === i3.currentFloor.elevation + 1);
    h && await l(h);
  } }, "Floors Up/Down"), u2.add("Down", { default: async () => {
    let h = g.find((m) => m.elevation === i3.currentFloor.elevation - 1);
    h && await l(h);
  } }, "Floors Up/Down"), { zoomToFloor: r, expandAll: d };
}
function Ie(i3, e, o) {
  let t2 = i3.addFolder("StackedMaps");
  t2.close(), $e(e, o, { root: t2, showLabelsPerFloor: false });
}
function Te(i3, e, o) {
  tt();
  let t2 = new J({ title: "SDK Controls" });
  t2.domElement.classList.add("mappedin-js-inspector"), ve(e, i3, t2), Ae(t2, e, o == null ? void 0 : o.camera);
  let n = t2.addFolder("Levels").close(), s = t2.addFolder("Scene Controls");
  s.close();
  let r = t2.addFolder("Labels");
  we(t2, e, i3);
  let a = t2.addFolder("Markers");
  _e(t2, e), Ie(t2, e, i3);
  let l = t2.addFolder("misc");
  Ee(t2, e, i3), Me(l, e, i3);
  let p = { level: e.currentFloor.id }, { populatelabels: c2 } = ye(r, i3, e), { populateMarkers: u2 } = ke(a, i3, e), g = i3.getByType("floor").reduce((h, m) => (h[m.name] = m.id, h), {}), d = n.add(p, "level", g).onChange((h) => {
    e.setFloor(h), p.level = e.currentFloor.id, d.updateDisplay();
  });
  return e.on("floor-change-start", (h) => {
    n.controllers[0].setValue(h.floor.id);
  }), i3.getByType("space").forEach((h) => {
    e.updateState(h, { interactive: true });
  }), i3.getByType("object").forEach((h) => {
    e.updateState(h, { interactive: true });
  }), i3.getByType("object").forEach((h) => {
    e.updateState(h, { interactive: true });
  }), e.setHoverColor("#a2b7e6"), e.Camera.setMaxZoomLevel(20), { populatelabels: c2, sceneFolder: s, populateMarkers: u2 };
}
var Oe = "mappedin-sdk-debug-css";
function tt() {
  if (document.getElementById(Oe)) return;
  let i3 = document.createElement("style");
  i3.id = Oe, i3.textContent = Ce, document.head.appendChild(i3);
}
var le = class {
  constructor(e, o) {
    t(this, "_enabled", false);
    t(this, "mv");
    t(this, "api");
    t(this, "mapData");
    t(this, "scenegraphVisualizerMounted", false);
    t(this, "storeStateToLocalStorageEnabled", false);
    this.mv = e, this.api = o, this.mapData = this.api.getMapData();
  }
  setMapData(e) {
    this.mapData = e;
  }
  async enable(e = {}) {
    var t2;
    if (this._enabled) return;
    if (this._enabled = true, !this.mapData) throw new Error("Please set mapData before enable debug.");
    let { sceneFolder: o } = Te(this.mapData, this.mv, e);
    o.onOpenClose((n) => {
      n === o && !n._closed && !this.scenegraphVisualizerMounted && (this.scenegraphVisualizerMounted = true, Zw(this.api.core, o));
    }), (t2 = this.api.getMapDataInternal()) == null || t2.spaces.forEach((n) => {
      this.mv.updateState(n.id, { interactive: true });
    });
  }
  get enabled() {
    return this._enabled;
  }
};
export {
  le as Inspector
};
//# sourceMappingURL=inspector-WHX467BE-76RGAMKL.js.map
